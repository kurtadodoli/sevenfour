{"ast":null,"code":"var _jsxFileName = \"C:\\\\sevenfour\\\\src\\\\components\\\\StaffRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\n\n/**\r\n * Route component that only allows staff or admin users to access the wrapped routes\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StaffRoute = () => {\n  _s();\n  const {\n    currentUser,\n    loading\n  } = useAuth();\n\n  // If auth is still loading, show nothing or a loading spinner\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if user is staff or admin\n  if (currentUser && (currentUser.role === 'staff' || currentUser.role === 'admin')) {\n    return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Redirect to unauthorized page if not staff or admin\n  return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/unauthorized\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n};\n_s(StaffRoute, \"+loUN5XsQVjYs/gtfuWkb9VBZ7Q=\", false, function () {\n  return [useAuth];\n});\n_c = StaffRoute;\nexport default StaffRoute;\nvar _c;\n$RefreshReg$(_c, \"StaffRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useAuth","jsxDEV","_jsxDEV","StaffRoute","_s","currentUser","loading","children","fileName","_jsxFileName","lineNumber","columnNumber","role","to","replace","_c","$RefreshReg$"],"sources":["C:/sevenfour/src/components/StaffRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\n/**\r\n * Route component that only allows staff or admin users to access the wrapped routes\r\n */\r\nconst StaffRoute = () => {\r\n  const { currentUser, loading } = useAuth();\r\n  \r\n  // If auth is still loading, show nothing or a loading spinner\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  \r\n  // Check if user is staff or admin\r\n  if (currentUser && (currentUser.role === 'staff' || currentUser.role === 'admin')) {\r\n    return <Outlet />;\r\n  }\r\n  \r\n  // Redirect to unauthorized page if not staff or admin\r\n  return <Navigate to=\"/unauthorized\" replace />;\r\n};\r\n\r\nexport default StaffRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,SAASC,OAAO,QAAQ,wBAAwB;;AAEhD;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM;IAAEC,WAAW;IAAEC;EAAQ,CAAC,GAAGN,OAAO,CAAC,CAAC;;EAE1C;EACA,IAAIM,OAAO,EAAE;IACX,oBAAOJ,OAAA;MAAAK,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;;EAEA;EACA,IAAIN,WAAW,KAAKA,WAAW,CAACO,IAAI,KAAK,OAAO,IAAIP,WAAW,CAACO,IAAI,KAAK,OAAO,CAAC,EAAE;IACjF,oBAAOV,OAAA,CAACH,MAAM;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnB;;EAEA;EACA,oBAAOT,OAAA,CAACJ,QAAQ;IAACe,EAAE,EAAC,eAAe;IAACC,OAAO;EAAA;IAAAN,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAChD,CAAC;AAACP,EAAA,CAfID,UAAU;EAAA,QACmBH,OAAO;AAAA;AAAAe,EAAA,GADpCZ,UAAU;AAiBhB,eAAeA,UAAU;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}