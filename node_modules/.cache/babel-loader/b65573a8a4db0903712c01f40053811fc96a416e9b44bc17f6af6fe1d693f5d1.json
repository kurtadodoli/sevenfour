{"ast":null,"code":"var _jsxFileName = \"C:\\\\sevenfour\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { debugToken } from '../utils/authDebug';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // API base URL (using the imported api instance now)\n  const API_BASE_URL = 'http://localhost:3001';\n  const logout = useCallback(() => {\n    localStorage.removeItem('token');\n    setCurrentUser(null);\n    setError(null);\n  }, []);\n  const verifyAndSetUser = useCallback(async token => {\n    try {\n      if (!token) {\n        console.log('No token provided for verification');\n        return false;\n      }\n      console.log('Verifying token...');\n\n      // Create a clean axios instance for token verification\n      // This prevents automatic logout during token verification\n      const verifyApi = axios.create({\n        baseURL: API_BASE_URL,\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      try {\n        var _verifyResponse$data, _verifyResponse$data2, _verifyResponse$data3;\n        // Verify token with server\n        const verifyResponse = await verifyApi.get('/api/auth/verify');\n        if ((_verifyResponse$data = verifyResponse.data) !== null && _verifyResponse$data !== void 0 && _verifyResponse$data.success && (_verifyResponse$data2 = verifyResponse.data) !== null && _verifyResponse$data2 !== void 0 && (_verifyResponse$data3 = _verifyResponse$data2.data) !== null && _verifyResponse$data3 !== void 0 && _verifyResponse$data3.user) {\n          console.log('Token verification successful');\n\n          // Even with basic verification success, set the user\n          setCurrentUser(verifyResponse.data.data.user);\n          setError(null);\n\n          // Try to get full profile data after successful verification\n          try {\n            var _profileResponse$data, _profileResponse$data2, _profileResponse$data3;\n            console.log('Fetching full profile after verification');\n            const profileResponse = await verifyApi.get('/api/auth/profile');\n            if ((_profileResponse$data = profileResponse.data) !== null && _profileResponse$data !== void 0 && _profileResponse$data.success && (_profileResponse$data2 = profileResponse.data) !== null && _profileResponse$data2 !== void 0 && (_profileResponse$data3 = _profileResponse$data2.data) !== null && _profileResponse$data3 !== void 0 && _profileResponse$data3.user) {\n              console.log('Full profile fetched successfully');\n              setCurrentUser(profileResponse.data.data.user);\n            }\n          } catch (profileError) {\n            console.warn('Profile fetch failed after verification, using basic user data:', profileError);\n            // We already set the user from verify response, so we're good\n          }\n          return true;\n        } else {\n          console.warn('Token verification response missing user data');\n          throw new Error('Invalid user data received');\n        }\n      } catch (verifyError) {\n        console.error('Token verification request failed:', verifyError);\n\n        // Try the profile endpoint directly as a fallback\n        try {\n          var _profileResponse$data4, _profileResponse$data5, _profileResponse$data6;\n          console.log('Trying profile endpoint as fallback verification');\n          const profileResponse = await verifyApi.get('/api/auth/profile');\n          if ((_profileResponse$data4 = profileResponse.data) !== null && _profileResponse$data4 !== void 0 && _profileResponse$data4.success && (_profileResponse$data5 = profileResponse.data) !== null && _profileResponse$data5 !== void 0 && (_profileResponse$data6 = _profileResponse$data5.data) !== null && _profileResponse$data6 !== void 0 && _profileResponse$data6.user) {\n            console.log('Profile endpoint verification successful');\n            setCurrentUser(profileResponse.data.data.user);\n            setError(null);\n            return true;\n          }\n        } catch (profileError) {\n          console.error('Both verification methods failed, must log out');\n          throw verifyError; // Throw the original error\n        }\n      }\n      throw new Error('All verification methods failed');\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Token verification completely failed:', error);\n      // Only clear token and user on verified authentication failures\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 403) {\n        setError('Session expired. Please login again.');\n        logout();\n      } else {\n        // For network or server errors, don't log out - might be temporary\n        setError('Verification failed. Please try again later.');\n      }\n      return false;\n    }\n  }, [API_BASE_URL, logout]); // Check authentication on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      console.log('Checking authentication on app load');\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // Check token validity and debug info\n          debugToken();\n          console.log('Token found in localStorage, verifying...');\n          const verified = await verifyAndSetUser(token);\n          if (!verified) {\n            console.warn('Token verification failed but did not throw an error');\n          }\n        } catch (error) {\n          var _error$response3, _error$response4;\n          console.error('Error during initial auth check:', error);\n          // Don't remove token on network errors, it might just be temporary\n          if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 401 || ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 403) {\n            console.log('Clearing invalid token');\n            localStorage.removeItem('token');\n          }\n        }\n      } else {\n        console.log('No token found in localStorage');\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, [verifyAndSetUser]);\n  const login = useCallback(async credentials => {\n    try {\n      var _loginResponse$data, _loginResponse$data2;\n      setError(null);\n      setLoading(true);\n\n      // Create a clean axios instance for login without interceptors\n      // This prevents automatic logout on 401 during login attempts\n      const loginApi = axios.create({\n        baseURL: API_BASE_URL,\n        timeout: 10000,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Make the login request with the clean instance\n      const loginResponse = await loginApi.post('/api/auth/login', credentials);\n      if ((_loginResponse$data = loginResponse.data) !== null && _loginResponse$data !== void 0 && _loginResponse$data.success && (_loginResponse$data2 = loginResponse.data) !== null && _loginResponse$data2 !== void 0 && _loginResponse$data2.data) {\n        const {\n          user,\n          token\n        } = loginResponse.data.data;\n\n        // Store token before making any other API calls\n        localStorage.setItem('token', token);\n\n        // Immediately set the user data from login\n        setCurrentUser(user);\n        console.log('Login successful, token stored, user set in context');\n\n        // Use a timeout to avoid race conditions\n        setTimeout(async () => {\n          try {\n            var _profileResponse$data7, _profileResponse$data8, _profileResponse$data9;\n            console.log('Fetching full profile after login');\n            // Create a new request with the token\n            const authHeader = {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            };\n            const profileResponse = await axios.get(`${API_BASE_URL}/api/auth/profile`, authHeader);\n            if ((_profileResponse$data7 = profileResponse.data) !== null && _profileResponse$data7 !== void 0 && _profileResponse$data7.success && (_profileResponse$data8 = profileResponse.data) !== null && _profileResponse$data8 !== void 0 && (_profileResponse$data9 = _profileResponse$data8.data) !== null && _profileResponse$data9 !== void 0 && _profileResponse$data9.user) {\n              console.log('Full profile fetched successfully');\n              setCurrentUser(profileResponse.data.data.user);\n            }\n          } catch (profileError) {\n            console.warn('Could not fetch full profile after login:', profileError);\n            // Continue with basic user data if profile fetch fails\n          }\n        }, 500);\n        return {\n          success: true,\n          user,\n          token\n        };\n      } else {\n        throw new Error('Invalid response from server');\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Login failed:', error);\n      const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message || 'Login failed. Please try again.';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [API_BASE_URL]);\n\n  // Register function - using multiple approaches to ensure reliability\n  const register = useCallback(async userData => {\n    try {\n      setError(null);\n      setLoading(true);\n      console.log('Starting registration process with data:', userData);\n\n      // First, try using our configured API\n      try {\n        var _response$data, _response$data2;\n        const response = await api.post('/auth/register', userData);\n        console.log('Registration API response:', response);\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.data) {\n          const {\n            user,\n            token\n          } = response.data.data;\n          localStorage.setItem('token', token);\n          setCurrentUser(user);\n          console.log('Registration successful!', user);\n          return {\n            success: true,\n            user,\n            token\n          };\n        } else {\n          throw new Error('Invalid response from server');\n        }\n      } catch (apiError) {\n        console.error('API registration failed, trying fetch:', apiError);\n\n        // If API call fails, try direct fetch as backup\n        const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(userData)\n        });\n        const data = await response.json();\n        console.log('Fetch registration response:', response.status, data);\n        if (response.ok && data.success && data.data) {\n          const {\n            user,\n            token\n          } = data.data;\n          localStorage.setItem('token', token);\n          setCurrentUser(user);\n          console.log('Registration successful via fetch!', user);\n          return {\n            success: true,\n            user,\n            token\n          };\n        } else {\n          const errorMessage = data.message || 'Registration failed';\n          console.error('Fetch registration failed:', errorMessage);\n          throw new Error(errorMessage);\n        }\n      }\n    } catch (error) {\n      console.error('Registration ultimately failed:', error);\n      const errorMessage = error.message || 'Registration failed. Please try again.';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [API_BASE_URL]);\n  const getProfile = useCallback(async () => {\n    try {\n      var _response$data3, _response$data4, _response$data4$data;\n      console.log('AuthContext: Getting user profile...');\n\n      // If we already have the current user data, use it first\n      if (currentUser) {\n        console.log('AuthContext: Using cached user data');\n        return currentUser;\n      }\n      const response = await api.get('/api/auth/profile');\n      console.log('AuthContext: Profile API response:', response.data);\n      if ((_response$data3 = response.data) !== null && _response$data3 !== void 0 && _response$data3.success && (_response$data4 = response.data) !== null && _response$data4 !== void 0 && (_response$data4$data = _response$data4.data) !== null && _response$data4$data !== void 0 && _response$data4$data.user) {\n        // Update the current user in context\n        setCurrentUser(response.data.data.user);\n        return response.data.data.user;\n      } else {\n        var _response$data5;\n        console.warn('Profile response missing expected data structure:', response.data);\n\n        // Return whatever data we have instead of throwing an error\n        if ((_response$data5 = response.data) !== null && _response$data5 !== void 0 && _response$data5.data) {\n          return response.data.data;\n        }\n        throw new Error('Invalid profile data received');\n      }\n    } catch (error) {\n      var _error$response6;\n      console.error('Failed to get profile:', error);\n\n      // If there's an authentication error, log the user out\n      if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 401) {\n        logout();\n      }\n\n      // Return current user as fallback if available\n      if (currentUser) {\n        console.log('AuthContext: Using current user as fallback');\n        return currentUser;\n      }\n      throw error;\n    }\n  }, [currentUser, logout]);\n  const updateProfile = useCallback(async profileData => {\n    try {\n      var _response$data6, _response$data7, _response$data7$data;\n      const response = await api.put('/api/auth/profile', profileData);\n      if ((_response$data6 = response.data) !== null && _response$data6 !== void 0 && _response$data6.success && (_response$data7 = response.data) !== null && _response$data7 !== void 0 && (_response$data7$data = _response$data7.data) !== null && _response$data7$data !== void 0 && _response$data7$data.user) {\n        setCurrentUser(response.data.data.user);\n        return response.data.data.user;\n      }\n    } catch (error) {\n      console.error('Failed to update profile:', error);\n      throw error;\n    }\n  }, []);\n  const uploadProfilePicture = useCallback(async file => {\n    try {\n      const formData = new FormData();\n      formData.append('profile_picture', file); // Make sure this matches the field name expected by the server\n\n      // Try the profile-specific API route first\n      try {\n        var _response$data8;\n        const response = await api.post('/api/profile/profile/picture', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if ((_response$data8 = response.data) !== null && _response$data8 !== void 0 && _response$data8.success) {\n          // Refresh user profile to get updated picture URL\n          const updatedProfile = await getProfile();\n          return updatedProfile;\n        } else {\n          var _response$data9;\n          throw new Error(((_response$data9 = response.data) === null || _response$data9 === void 0 ? void 0 : _response$data9.message) || 'Upload failed');\n        }\n      } catch (primaryError) {\n        var _fallbackResponse$dat;\n        console.warn('Primary upload route failed, trying fallback route:', primaryError);\n\n        // Fallback to the auth route\n        const fallbackResponse = await api.post('/api/auth/upload-profile-picture', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        if ((_fallbackResponse$dat = fallbackResponse.data) !== null && _fallbackResponse$dat !== void 0 && _fallbackResponse$dat.success) {\n          // Refresh user profile to get updated picture URL\n          const updatedProfile = await getProfile();\n          return updatedProfile;\n        } else {\n          var _fallbackResponse$dat2;\n          throw new Error(((_fallbackResponse$dat2 = fallbackResponse.data) === null || _fallbackResponse$dat2 === void 0 ? void 0 : _fallbackResponse$dat2.message) || 'Failed to upload profile picture');\n        }\n      }\n    } catch (error) {\n      console.error('Failed to upload profile picture:', error);\n      throw error;\n    }\n  }, [getProfile]);\n  const updateUser = useCallback(userData => {\n    setCurrentUser(prev => ({\n      ...prev,\n      ...userData\n    }));\n  }, []);\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // Check if user is admin\n  const isAdmin = (currentUser === null || currentUser === void 0 ? void 0 : currentUser.role) === 'admin';\n  const value = {\n    currentUser,\n    setCurrentUser,\n    // Expose setCurrentUser directly\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    getProfile,\n    updateProfile,\n    uploadProfilePicture,\n    updateUser,\n    clearError,\n    isAdmin,\n    api // Expose api instance for other components\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 375,\n    columnNumber: 9\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"p5X1IQyDlu2y3eJsa3vVL3s92M8=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","axios","debugToken","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","API_BASE_URL","logout","localStorage","removeItem","verifyAndSetUser","token","console","log","verifyApi","create","baseURL","timeout","headers","_verifyResponse$data","_verifyResponse$data2","_verifyResponse$data3","verifyResponse","get","data","success","user","_profileResponse$data","_profileResponse$data2","_profileResponse$data3","profileResponse","profileError","warn","Error","verifyError","_profileResponse$data4","_profileResponse$data5","_profileResponse$data6","_error$response","_error$response2","response","status","checkAuth","getItem","verified","_error$response3","_error$response4","login","credentials","_loginResponse$data","_loginResponse$data2","loginApi","loginResponse","post","setItem","setTimeout","_profileResponse$data7","_profileResponse$data8","_profileResponse$data9","authHeader","Authorization","_error$response5","_error$response5$data","errorMessage","message","register","userData","_response$data","_response$data2","apiError","fetch","method","body","JSON","stringify","json","ok","getProfile","_response$data3","_response$data4","_response$data4$data","_response$data5","_error$response6","updateProfile","profileData","_response$data6","_response$data7","_response$data7$data","put","uploadProfilePicture","file","formData","FormData","append","_response$data8","updatedProfile","_response$data9","primaryError","_fallbackResponse$dat","fallbackResponse","_fallbackResponse$dat2","updateUser","prev","clearError","isAdmin","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/sevenfour/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { debugToken } from '../utils/authDebug';\r\nimport api from '../utils/api';\r\n\r\nexport const AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState(null);    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    \r\n    // API base URL (using the imported api instance now)\r\n    const API_BASE_URL = 'http://localhost:3001';\r\n\r\n    const logout = useCallback(() => {\r\n        localStorage.removeItem('token');\r\n        setCurrentUser(null);\r\n        setError(null);\r\n    }, []);    const verifyAndSetUser = useCallback(async (token) => {\r\n        try {\r\n            if (!token) {\r\n                console.log('No token provided for verification');\r\n                return false;\r\n            }\r\n\r\n            console.log('Verifying token...');\r\n            \r\n            // Create a clean axios instance for token verification\r\n            // This prevents automatic logout during token verification\r\n            const verifyApi = axios.create({\r\n                baseURL: API_BASE_URL,\r\n                timeout: 10000,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            try {\r\n                // Verify token with server\r\n                const verifyResponse = await verifyApi.get('/api/auth/verify');\r\n                \r\n                if (verifyResponse.data?.success && verifyResponse.data?.data?.user) {\r\n                    console.log('Token verification successful');\r\n                    \r\n                    // Even with basic verification success, set the user\r\n                    setCurrentUser(verifyResponse.data.data.user);\r\n                    setError(null);\r\n                    \r\n                    // Try to get full profile data after successful verification\r\n                    try {\r\n                        console.log('Fetching full profile after verification');\r\n                        const profileResponse = await verifyApi.get('/api/auth/profile');\r\n                        \r\n                        if (profileResponse.data?.success && profileResponse.data?.data?.user) {\r\n                            console.log('Full profile fetched successfully');\r\n                            setCurrentUser(profileResponse.data.data.user);\r\n                        }\r\n                    } catch (profileError) {\r\n                        console.warn('Profile fetch failed after verification, using basic user data:', profileError);\r\n                        // We already set the user from verify response, so we're good\r\n                    }\r\n                    \r\n                    return true;\r\n                } else {\r\n                    console.warn('Token verification response missing user data');\r\n                    throw new Error('Invalid user data received');\r\n                }\r\n            } catch (verifyError) {\r\n                console.error('Token verification request failed:', verifyError);\r\n                \r\n                // Try the profile endpoint directly as a fallback\r\n                try {\r\n                    console.log('Trying profile endpoint as fallback verification');\r\n                    const profileResponse = await verifyApi.get('/api/auth/profile');\r\n                    \r\n                    if (profileResponse.data?.success && profileResponse.data?.data?.user) {\r\n                        console.log('Profile endpoint verification successful');\r\n                        setCurrentUser(profileResponse.data.data.user);\r\n                        setError(null);\r\n                        return true;\r\n                    }\r\n                } catch (profileError) {\r\n                    console.error('Both verification methods failed, must log out');\r\n                    throw verifyError; // Throw the original error\r\n                }\r\n            }\r\n            \r\n            throw new Error('All verification methods failed');\r\n        } catch (error) {\r\n            console.error('Token verification completely failed:', error);\r\n            // Only clear token and user on verified authentication failures\r\n            if (error.response?.status === 401 || error.response?.status === 403) {\r\n                setError('Session expired. Please login again.');\r\n                logout();\r\n            } else {\r\n                // For network or server errors, don't log out - might be temporary\r\n                setError('Verification failed. Please try again later.');\r\n            }\r\n            return false;\r\n        }\r\n    }, [API_BASE_URL, logout]);    // Check authentication on app load\r\n    useEffect(() => {\r\n        const checkAuth = async () => {\r\n            console.log('Checking authentication on app load');\r\n            const token = localStorage.getItem('token');\r\n            \r\n            if (token) {\r\n                try {\r\n                    // Check token validity and debug info\r\n                    debugToken();\r\n                    \r\n                    console.log('Token found in localStorage, verifying...');\r\n                    const verified = await verifyAndSetUser(token);\r\n                    \r\n                    if (!verified) {\r\n                        console.warn('Token verification failed but did not throw an error');\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error during initial auth check:', error);\r\n                    // Don't remove token on network errors, it might just be temporary\r\n                    if (error.response?.status === 401 || error.response?.status === 403) {\r\n                        console.log('Clearing invalid token');\r\n                        localStorage.removeItem('token');\r\n                    }\r\n                }\r\n            } else {\r\n                console.log('No token found in localStorage');\r\n            }\r\n            \r\n            setLoading(false);\r\n        };\r\n        \r\n        checkAuth();\r\n    }, [verifyAndSetUser]);const login = useCallback(async (credentials) => {\r\n        try {\r\n            setError(null);\r\n            setLoading(true);\r\n\r\n            // Create a clean axios instance for login without interceptors\r\n            // This prevents automatic logout on 401 during login attempts\r\n            const loginApi = axios.create({\r\n                baseURL: API_BASE_URL,\r\n                timeout: 10000,\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            });\r\n\r\n            // Make the login request with the clean instance\r\n            const loginResponse = await loginApi.post('/api/auth/login', credentials);\r\n            \r\n            if (loginResponse.data?.success && loginResponse.data?.data) {\r\n                const { user, token } = loginResponse.data.data;\r\n                \r\n                // Store token before making any other API calls\r\n                localStorage.setItem('token', token);\r\n                \r\n                // Immediately set the user data from login\r\n                setCurrentUser(user);\r\n                \r\n                console.log('Login successful, token stored, user set in context');\r\n                \r\n                // Use a timeout to avoid race conditions\r\n                setTimeout(async () => {\r\n                    try {\r\n                        console.log('Fetching full profile after login');\r\n                        // Create a new request with the token\r\n                        const authHeader = { headers: { Authorization: `Bearer ${token}` } };\r\n                        const profileResponse = await axios.get(\r\n                            `${API_BASE_URL}/api/auth/profile`, \r\n                            authHeader\r\n                        );\r\n                        \r\n                        if (profileResponse.data?.success && profileResponse.data?.data?.user) {\r\n                            console.log('Full profile fetched successfully');\r\n                            setCurrentUser(profileResponse.data.data.user);\r\n                        }\r\n                    } catch (profileError) {\r\n                        console.warn('Could not fetch full profile after login:', profileError);\r\n                        // Continue with basic user data if profile fetch fails\r\n                    }\r\n                }, 500);\r\n                \r\n                return { success: true, user, token };\r\n            } else {\r\n                throw new Error('Invalid response from server');\r\n            }\r\n        } catch (error) {\r\n            console.error('Login failed:', error);\r\n            const errorMessage = error.response?.data?.message || error.message || 'Login failed. Please try again.';\r\n            setError(errorMessage);\r\n            throw new Error(errorMessage);\r\n        } finally {\r\n            setLoading(false);\r\n        }    }, [API_BASE_URL]);\r\n    \r\n    // Register function - using multiple approaches to ensure reliability\r\n    const register = useCallback(async (userData) => {\r\n        try {\r\n            setError(null);\r\n            setLoading(true);\r\n            console.log('Starting registration process with data:', userData);\r\n\r\n            // First, try using our configured API\r\n            try {\r\n                const response = await api.post('/auth/register', userData);\r\n                console.log('Registration API response:', response);\r\n                \r\n                if (response.data?.success && response.data?.data) {\r\n                    const { user, token } = response.data.data;\r\n                    localStorage.setItem('token', token);\r\n                    setCurrentUser(user);\r\n                    console.log('Registration successful!', user);\r\n                    return { success: true, user, token };\r\n                } else {\r\n                    throw new Error('Invalid response from server');\r\n                }\r\n            } catch (apiError) {\r\n                console.error('API registration failed, trying fetch:', apiError);\r\n                \r\n                // If API call fails, try direct fetch as backup\r\n                const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(userData)\r\n                });\r\n                \r\n                const data = await response.json();\r\n                console.log('Fetch registration response:', response.status, data);\r\n                \r\n                if (response.ok && data.success && data.data) {\r\n                    const { user, token } = data.data;\r\n                    localStorage.setItem('token', token);\r\n                    setCurrentUser(user);\r\n                    console.log('Registration successful via fetch!', user);\r\n                    return { success: true, user, token };\r\n                } else {\r\n                    const errorMessage = data.message || 'Registration failed';\r\n                    console.error('Fetch registration failed:', errorMessage);\r\n                    throw new Error(errorMessage);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Registration ultimately failed:', error);\r\n            const errorMessage = error.message || 'Registration failed. Please try again.';\r\n            setError(errorMessage);\r\n            throw new Error(errorMessage);        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [API_BASE_URL]);const getProfile = useCallback(async () => {\r\n        try {\r\n            console.log('AuthContext: Getting user profile...');\r\n            \r\n            // If we already have the current user data, use it first\r\n            if (currentUser) {\r\n                console.log('AuthContext: Using cached user data');\r\n                return currentUser;\r\n            }\r\n            \r\n            const response = await api.get('/api/auth/profile');\r\n            console.log('AuthContext: Profile API response:', response.data);\r\n            \r\n            if (response.data?.success && response.data?.data?.user) {\r\n                // Update the current user in context\r\n                setCurrentUser(response.data.data.user);\r\n                return response.data.data.user;\r\n            } else {\r\n                console.warn('Profile response missing expected data structure:', response.data);\r\n                \r\n                // Return whatever data we have instead of throwing an error\r\n                if (response.data?.data) {\r\n                    return response.data.data;\r\n                }\r\n                \r\n                throw new Error('Invalid profile data received');\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to get profile:', error);\r\n            \r\n            // If there's an authentication error, log the user out\r\n            if (error.response?.status === 401) {\r\n                logout();\r\n            }\r\n            \r\n            // Return current user as fallback if available\r\n            if (currentUser) {\r\n                console.log('AuthContext: Using current user as fallback');\r\n                return currentUser;\r\n            }\r\n              throw error;\r\n        }\r\n    }, [currentUser, logout]);const updateProfile = useCallback(async (profileData) => {\r\n        try {\r\n            const response = await api.put('/api/auth/profile', profileData);\r\n            if (response.data?.success && response.data?.data?.user) {\r\n                setCurrentUser(response.data.data.user);\r\n                return response.data.data.user;\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to update profile:', error);            throw error;\r\n        }\r\n    }, []);const uploadProfilePicture = useCallback(async (file) => {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('profile_picture', file);  // Make sure this matches the field name expected by the server\r\n\r\n            // Try the profile-specific API route first\r\n            try {\r\n                const response = await api.post('/api/profile/profile/picture', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n                \r\n                if (response.data?.success) {\r\n                    // Refresh user profile to get updated picture URL\r\n                    const updatedProfile = await getProfile();\r\n                    return updatedProfile;\r\n                } else {\r\n                    throw new Error(response.data?.message || 'Upload failed');\r\n                }\r\n            } catch (primaryError) {\r\n                console.warn('Primary upload route failed, trying fallback route:', primaryError);\r\n                \r\n                // Fallback to the auth route\r\n                const fallbackResponse = await api.post('/api/auth/upload-profile-picture', formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                    },\r\n                });\r\n                \r\n                if (fallbackResponse.data?.success) {\r\n                    // Refresh user profile to get updated picture URL\r\n                    const updatedProfile = await getProfile();\r\n                    return updatedProfile;\r\n                } else {\r\n                    throw new Error(fallbackResponse.data?.message || 'Failed to upload profile picture');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Failed to upload profile picture:', error);            throw error;\r\n        }\r\n    }, [getProfile]);\r\n\r\n    const updateUser = useCallback((userData) => {\r\n        setCurrentUser(prev => ({ ...prev, ...userData }));\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setError(null);\r\n    }, []);\r\n\r\n    // Check if user is admin\r\n    const isAdmin = currentUser?.role === 'admin';    const value = {\r\n        currentUser,\r\n        setCurrentUser, // Expose setCurrentUser directly\r\n        loading,\r\n        error,\r\n        login,\r\n        register,\r\n        logout,\r\n        getProfile,\r\n        updateProfile,\r\n        uploadProfilePicture,\r\n        updateUser,\r\n        clearError,\r\n        isAdmin,\r\n        api // Expose api instance for other components\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n    const context = useContext(AuthContext);\r\n    if (!context) {\r\n        throw new Error('useAuth must be used within an AuthProvider');\r\n    }\r\n    return context;\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}